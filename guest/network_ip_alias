#!/bin/bash
shopt -s nullglob

COMMAND=$1
IF_IDX=$2
PREFIX=$3

LOCK_FILE="/var/run/one-context.lock"
CONTEXT_FILE="/tmp/context.$$"

function get_new_context
{
    CONTEXT_DEV=`blkid -l -t LABEL="CONTEXT" -o device`
    if [ -e "$CONTEXT_DEV" ]; then
        mount -t iso9660 -L CONTEXT -o ro /mnt
        if [ -f /mnt/context.sh ]; then
            cp /mnt/context.sh ${CONTEXT_FILE}
        fi
        umount /mnt
    elif curl -o ${CONTEXT_FILE} http://169.254.169.254/latest/user-data ; then
        echo -n ""
    fi
}

function read_eth_context
{
    if [ -f $CONTEXT_FILE ] ; then
        ONE_VARS=`cat $CONTEXT_FILE | egrep -e '^ETH[0-9]*=' | sed 's/=.*$//'`

        . $CONTEXT_FILE

        for v in $ONE_VARS; do
            export $v
        done
    fi
}

function get_interface_mac
{
    ip link show | awk '/^[0-9]+: [A-Za-z0-9]+:/ { device=$2; gsub(/:/, "",device)} /link\/ether/ { print device " " $2 }'
}

function get_context_interfaces
{
    env | grep -E "^ETH[0-9]+_MAC=" | sed 's/_.*$//' | sort
}

function get_dev
{
    list="$1"
    mac="$2"

    echo "$list" | grep "$mac" | cut -d' ' -f1 | tail -n1
}

function get_interface_name
{
    var_name="ETH${1}_MAC"
    MAC=$(eval "echo \"\${$var_name}\"")

    if [ -z "$MAC" ]; then
        return
    fi
    IF_MAC_LIST=$(get_interface_mac)
    DEV=$(get_dev "$IF_MAC_LIST" "$MAC")

    echo $DEV
}

function check_iface_addr
{
    if [ -z "$IF_IDX" ]; then
        >&2 echo "Missing interface index"
        exit 1
    fi
    get_new_context
    read_eth_context
    IFACE=$(get_interface_name "$IF_IDX")
    if [ -z "$IFACE" ]; then
        >&2 echo "Interface not found"
        exit 1
    fi
    if ! ip link show dev "$IFACE" >/dev/null 2>&1 ; then
        >&2 echo "Incorrect interface $IFACE"
        exit 1
    fi
    if [ -z "$PREFIX" ]; then
        >&2 echo "Missing address"
        exit 1
    fi

    ADDRESS=${PREFIX%/*}
    MASKSIZE=${PREFIX#*/}
    case $MASKSIZE in
        32) MASK=255.255.255.255;;
        31) MASK=255.255.255.254;;
        30) MASK=255.255.255.252;;
        29) MASK=255.255.255.248;;
        28) MASK=255.255.255.240;;
        27) MASK=255.255.255.224;;
        26) MASK=255.255.255.192;;
        25) MASK=255.255.255.128;;
        24) MASK=255.255.255.0;;
        23) MASK=255.255.254.0;;
        22) MASK=255.255.252.0;;
        21) MASK=255.255.248.0;;
        20) MASK=255.255.240.0;;
        19) MASK=255.255.224.0;;
        18) MASK=255.255.192.0;;
        17) MASK=255.255.128.0;;
        16) MASK=255.255.0.0;;
        15) MASK=255.254.0.0;;
        14) MASK=255.252.0.0;;
        13) MASK=255.248.0.0;;
        12) MASK=255.240.0.0;;
        11) MASK=255.224.0.0;;
        10) MASK=255.192.0.0;;
        9) MASK=255.128.0.0;;
        8) MASK=255.0.0.0;;
        7) MASK=254.0.0.0;;
        6) MASK=252.0.0.0;;
        5) MASK=248.0.0.0;;
        4) MASK=240.0.0.0;;
        3) MASK=224.0.0.0;;
        2) MASK=192.0.0.0;;
        1) MASK=128.0.0.0;;
    esac
}

function add_addr
{
    check_iface_addr
    ip addr add "$PREFIX" dev "$IFACE"
}

function del_addr
{
    check_iface_addr
    ip addr del "$PREFIX" dev "$IFACE"
}

function add_network_configuration
{

    check_iface_addr

    # get next available sub-interface number
    N=0
    for f in /etc/network/interfaces.d/$IFACE:*.cfg ; do
        a=${f%.cfg}
        N=${a##*:}
        echo found $f - $N
    done
    echo N $N
    N=$(( $N + 1 ))

    SUBIF=$IFACE:$N

    cat <<EOF >/etc/network/interfaces.d/${SUBIF}.cfg
#
# DO NOT REMOVE OR EDIT THIS FILE
#
# This file is created automatically and will be deleted/updated
# when VM setticg are changed. Do not edit, rename or remove!
#
auto $SUBIF
allow-hotplug $SUBIF
iface $SUBIF inet static
    address $ADDRESS
    netmask $MASK
EOF

}

function del_network_configuration
{
    check_iface_addr

    # find network intreface with this IP address
    for f in $(fgrep -l "address $ADDRESS" /etc/network/interfaces.d/$IFACE:*.cfg) ; do
        SUBIF=${f##*/}
        SUBIF=${SUBIF%.cfg}
        ifdown $SUBIF
        rm $f
    done
}

case $COMMAND in
    add)
        add_network_configuration
        ifup $SUBIF
        ;;
    delete)
        del_network_configuration
        ;;
    *)
        >&2 echo "Usage $0 {add|delete} <iface idx> <address/mask>"
        exit 1
esac
